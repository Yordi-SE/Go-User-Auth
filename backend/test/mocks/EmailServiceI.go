// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EmailServiceI is an autogenerated mock type for the EmailServiceI type
type EmailServiceI struct {
	mock.Mock
}

// GenerateOTP provides a mock function with given fields: length
func (_m *EmailServiceI) GenerateOTP(length int) (string, error) {
	ret := _m.Called(length)

	if len(ret) == 0 {
		panic("no return value specified for GenerateOTP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(length)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(length)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(length)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOTPEmailBody provides a mock function with given fields: otpCode, file_name
func (_m *EmailServiceI) GetOTPEmailBody(otpCode string, file_name string) (string, error) {
	ret := _m.Called(otpCode, file_name)

	if len(ret) == 0 {
		panic("no return value specified for GetOTPEmailBody")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(otpCode, file_name)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(otpCode, file_name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(otpCode, file_name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: email, subject, body, from
func (_m *EmailServiceI) SendEmail(email string, subject string, body string, from string) error {
	ret := _m.Called(email, subject, body, from)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(email, subject, body, from)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmailServiceI creates a new instance of EmailServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailServiceI {
	mock := &EmailServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
