// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	errors "user_authorization/error"

	mock "github.com/stretchr/testify/mock"
)

// HashingServiceI is an autogenerated mock type for the HashingServiceI type
type HashingServiceI struct {
	mock.Mock
}

// ComparePassword provides a mock function with given fields: hashedPassword, password
func (_m *HashingServiceI) ComparePassword(hashedPassword string, password string) bool {
	ret := _m.Called(hashedPassword, password)

	if len(ret) == 0 {
		panic("no return value specified for ComparePassword")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hashedPassword, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HashPassword provides a mock function with given fields: password
func (_m *HashingServiceI) HashPassword(password string) (string, *errors.CustomError) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 *errors.CustomError
	if rf, ok := ret.Get(0).(func(string) (string, *errors.CustomError)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *errors.CustomError); ok {
		r1 = rf(password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

// NewHashingServiceI creates a new instance of HashingServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashingServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashingServiceI {
	mock := &HashingServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
