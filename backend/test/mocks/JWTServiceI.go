// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	errors "user_authorization/error"

	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"

	models "user_authorization/domain"
)

// JWTServiceI is an autogenerated mock type for the JWTServiceI type
type JWTServiceI struct {
	mock.Mock
}

// FindClaim provides a mock function with given fields: token
func (_m *JWTServiceI) FindClaim(token *jwt.Token) (jwt.MapClaims, bool) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for FindClaim")
	}

	var r0 jwt.MapClaims
	var r1 bool
	if rf, ok := ret.Get(0).(func(*jwt.Token) (jwt.MapClaims, bool)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) jwt.MapClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.MapClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) bool); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Generate provides a mock function with given fields: user, refreshTokenId
func (_m *JWTServiceI) Generate(user *models.User, refreshTokenId string) (string, string, *errors.CustomError) {
	ret := _m.Called(user, refreshTokenId)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 string
	var r2 *errors.CustomError
	if rf, ok := ret.Get(0).(func(*models.User, string) (string, string, *errors.CustomError)); ok {
		return rf(user, refreshTokenId)
	}
	if rf, ok := ret.Get(0).(func(*models.User, string) string); ok {
		r0 = rf(user, refreshTokenId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.User, string) string); ok {
		r1 = rf(user, refreshTokenId)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*models.User, string) *errors.CustomError); ok {
		r2 = rf(user, refreshTokenId)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*errors.CustomError)
		}
	}

	return r0, r1, r2
}

// GeneratePasswordResetToken provides a mock function with given fields: user
func (_m *JWTServiceI) GeneratePasswordResetToken(user *models.User) (string, *errors.CustomError) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePasswordResetToken")
	}

	var r0 string
	var r1 *errors.CustomError
	if rf, ok := ret.Get(0).(func(*models.User) (string, *errors.CustomError)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.User) *errors.CustomError); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

// GenerateVerificationToken provides a mock function with given fields: user
func (_m *JWTServiceI) GenerateVerificationToken(user *models.User) (string, *errors.CustomError) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateVerificationToken")
	}

	var r0 string
	var r1 *errors.CustomError
	if rf, ok := ret.Get(0).(func(*models.User) (string, *errors.CustomError)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.User) *errors.CustomError); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

// ValidateAccessToken provides a mock function with given fields: token
func (_m *JWTServiceI) ValidateAccessToken(token string) (*jwt.Token, *errors.CustomError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccessToken")
	}

	var r0 *jwt.Token
	var r1 *errors.CustomError
	if rf, ok := ret.Get(0).(func(string) (*jwt.Token, *errors.CustomError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *errors.CustomError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

// ValidateRefreshToken provides a mock function with given fields: token
func (_m *JWTServiceI) ValidateRefreshToken(token string) (*jwt.Token, *errors.CustomError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshToken")
	}

	var r0 *jwt.Token
	var r1 *errors.CustomError
	if rf, ok := ret.Get(0).(func(string) (*jwt.Token, *errors.CustomError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *errors.CustomError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

// ValidateVerificationToken provides a mock function with given fields: token
func (_m *JWTServiceI) ValidateVerificationToken(token string) (*jwt.Token, *errors.CustomError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateVerificationToken")
	}

	var r0 *jwt.Token
	var r1 *errors.CustomError
	if rf, ok := ret.Get(0).(func(string) (*jwt.Token, *errors.CustomError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *errors.CustomError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

// ValidePasswordResetToken provides a mock function with given fields: token
func (_m *JWTServiceI) ValidePasswordResetToken(token string) (*jwt.Token, *errors.CustomError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidePasswordResetToken")
	}

	var r0 *jwt.Token
	var r1 *errors.CustomError
	if rf, ok := ret.Get(0).(func(string) (*jwt.Token, *errors.CustomError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *errors.CustomError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.CustomError)
		}
	}

	return r0, r1
}

// NewJWTServiceI creates a new instance of JWTServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTServiceI {
	mock := &JWTServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
